// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "github.com/NahuelDT/portfolio-api/internal/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MarketDataRepositorer is an autogenerated mock type for the MarketDataRepositorer type
type MarketDataRepositorer struct {
	mock.Mock
}

// CreateMarketData provides a mock function with given fields: marketData
func (_m *MarketDataRepositorer) CreateMarketData(marketData *models.MarketData) error {
	ret := _m.Called(marketData)

	if len(ret) == 0 {
		panic("no return value specified for CreateMarketData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.MarketData) error); ok {
		r0 = rf(marketData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMarketData provides a mock function with given fields: id
func (_m *MarketDataRepositorer) DeleteMarketData(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMarketData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDailyReturn provides a mock function with given fields: instrumentID, date
func (_m *MarketDataRepositorer) GetDailyReturn(instrumentID uint, date time.Time) (float64, error) {
	ret := _m.Called(instrumentID, date)

	if len(ret) == 0 {
		panic("no return value specified for GetDailyReturn")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, time.Time) (float64, error)); ok {
		return rf(instrumentID, date)
	}
	if rf, ok := ret.Get(0).(func(uint, time.Time) float64); ok {
		r0 = rf(instrumentID, date)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(uint, time.Time) error); ok {
		r1 = rf(instrumentID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestMarketData provides a mock function with given fields: instrumentID
func (_m *MarketDataRepositorer) GetLatestMarketData(instrumentID uint) (*models.MarketData, error) {
	ret := _m.Called(instrumentID)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestMarketData")
	}

	var r0 *models.MarketData
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.MarketData, error)); ok {
		return rf(instrumentID)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.MarketData); ok {
		r0 = rf(instrumentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MarketData)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(instrumentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarketDataByDateRange provides a mock function with given fields: instrumentID, startDate, endDate
func (_m *MarketDataRepositorer) GetMarketDataByDateRange(instrumentID uint, startDate time.Time, endDate time.Time) ([]models.MarketData, error) {
	ret := _m.Called(instrumentID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetMarketDataByDateRange")
	}

	var r0 []models.MarketData
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, time.Time, time.Time) ([]models.MarketData, error)); ok {
		return rf(instrumentID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(uint, time.Time, time.Time) []models.MarketData); ok {
		r0 = rf(instrumentID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MarketData)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, time.Time, time.Time) error); ok {
		r1 = rf(instrumentID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMarketData provides a mock function with given fields: marketData
func (_m *MarketDataRepositorer) UpdateMarketData(marketData *models.MarketData) error {
	ret := _m.Called(marketData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMarketData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.MarketData) error); ok {
		r0 = rf(marketData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMarketDataRepositorer creates a new instance of MarketDataRepositorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMarketDataRepositorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MarketDataRepositorer {
	mock := &MarketDataRepositorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
