// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "github.com/NahuelDT/portfolio-api/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// InstrumentRepositorer is an autogenerated mock type for the InstrumentRepositorer type
type InstrumentRepositorer struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: id
func (_m *InstrumentRepositorer) GetByID(id uint) (*models.Instrument, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Instrument
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Instrument, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Instrument); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Instrument)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: query
func (_m *InstrumentRepositorer) Search(query string) ([]models.Instrument, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []models.Instrument
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Instrument, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Instrument); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Instrument)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInstrumentRepositorer creates a new instance of InstrumentRepositorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstrumentRepositorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *InstrumentRepositorer {
	mock := &InstrumentRepositorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
