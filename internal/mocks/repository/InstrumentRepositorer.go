// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "github.com/NahuelDT/portfolio-api/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// InstrumentRepositorer is an autogenerated mock type for the InstrumentRepositorer type
type InstrumentRepositorer struct {
	mock.Mock
}

// Create provides a mock function with given fields: instrument
func (_m *InstrumentRepositorer) Create(instrument *models.Instrument) error {
	ret := _m.Called(instrument)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Instrument) error); ok {
		r0 = rf(instrument)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *InstrumentRepositorer) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: ticker
func (_m *InstrumentRepositorer) Exists(ticker string) (bool, error) {
	ret := _m.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(ticker)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(ticker)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *InstrumentRepositorer) FindByID(id uint) (*models.Instrument, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *models.Instrument
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.Instrument, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.Instrument); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Instrument)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTicker provides a mock function with given fields: ticker
func (_m *InstrumentRepositorer) FindByTicker(ticker string) (*models.Instrument, error) {
	ret := _m.Called(ticker)

	if len(ret) == 0 {
		panic("no return value specified for FindByTicker")
	}

	var r0 *models.Instrument
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Instrument, error)); ok {
		return rf(ticker)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Instrument); ok {
		r0 = rf(ticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Instrument)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields:
func (_m *InstrumentRepositorer) ListAll() ([]models.Instrument, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListAll")
	}

	var r0 []models.Instrument
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Instrument, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Instrument); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Instrument)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByType provides a mock function with given fields: instrumentType
func (_m *InstrumentRepositorer) ListByType(instrumentType string) ([]models.Instrument, error) {
	ret := _m.Called(instrumentType)

	if len(ret) == 0 {
		panic("no return value specified for ListByType")
	}

	var r0 []models.Instrument
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Instrument, error)); ok {
		return rf(instrumentType)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Instrument); ok {
		r0 = rf(instrumentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Instrument)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instrumentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: query
func (_m *InstrumentRepositorer) Search(query string) ([]models.Instrument, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []models.Instrument
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Instrument, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Instrument); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Instrument)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchByName provides a mock function with given fields: name
func (_m *InstrumentRepositorer) SearchByName(name string) ([]models.Instrument, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for SearchByName")
	}

	var r0 []models.Instrument
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Instrument, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Instrument); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Instrument)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: instrument
func (_m *InstrumentRepositorer) Update(instrument *models.Instrument) error {
	ret := _m.Called(instrument)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Instrument) error); ok {
		r0 = rf(instrument)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInstrumentRepositorer creates a new instance of InstrumentRepositorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstrumentRepositorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *InstrumentRepositorer {
	mock := &InstrumentRepositorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
