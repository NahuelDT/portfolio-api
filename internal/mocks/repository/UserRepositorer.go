// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "github.com/NahuelDT/portfolio-api/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// UserRepositorer is an autogenerated mock type for the UserRepositorer type
type UserRepositorer struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *UserRepositorer) Create(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *UserRepositorer) GetByID(id uint) (*models.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepositorer creates a new instance of UserRepositorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositorer {
	mock := &UserRepositorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
