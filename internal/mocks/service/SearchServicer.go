// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	service "github.com/NahuelDT/portfolio-api/internal/service"
	mock "github.com/stretchr/testify/mock"
)

// SearchServicer is an autogenerated mock type for the SearchServicer type
type SearchServicer struct {
	mock.Mock
}

// SearchAssets provides a mock function with given fields: query
func (_m *SearchServicer) SearchAssets(query string) ([]service.SearchResult, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for SearchAssets")
	}

	var r0 []service.SearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]service.SearchResult, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) []service.SearchResult); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSearchServicer creates a new instance of SearchServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSearchServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SearchServicer {
	mock := &SearchServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
